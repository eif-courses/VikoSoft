@page "/counter"
@using Microsoft.EntityFrameworkCore
@using VikoSoft.Data
@using VikoSoft.Entities
@rendermode InteractiveServer
@inject IDbContextFactory<VikoDbContext> DbFactory

<PageTitle>Counter</PageTitle>

<DataImporter/>

<FluentGrid Spacing="4">
    <FluentGridItem xs="12">
        <h4>With auto-fit</h4>
        <FluentDataGrid Items="@subjects" AutoFit="true">
            <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
            <PropertyColumn Property="@(p => p.SubjectType)" Sortable="true" />
            <PropertyColumn Property="@(p => p.LectureHours)" Sortable="true" />
            <PropertyColumn Property="@(p => p.PracticeHours)" Sortable="true" />
            <PropertyColumn Property="@(p => p.SelfStudyHours)" Sortable="true" />
            <PropertyColumn Property="@(p => p.RemoteLectureHours)" Sortable="true" />
            <PropertyColumn Property="@(p => p.RemotePracticeHours)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Credits)" Sortable="true" />
            <PropertyColumn Property="@(p => p.EvaluationForm)" Sortable="true" />
            <PropertyColumn Property="@(p => p.FinalProjectExamCount)" Sortable="true" />
            <PropertyColumn Property="@(p => p.OtherContactHoursCount)" Sortable="true" />
            <PropertyColumn Property="@(p => p.ConsultationCount)" Sortable="true" />
            <PropertyColumn Property="@(p => p.GradingNumberCount)" Sortable="true" />
            <PropertyColumn Property="@(p => p.HomeworkHoursCount)" Sortable="true" />
            <PropertyColumn Property="@(p => p.PracticeReportHoursCount)" Sortable="true" />
            <PropertyColumn Property="@(p => p.RemoteTeachingHoursCount)" Sortable="true" />
            <PropertyColumn Property="@(p => p.CourseWorkHoursCount)" Sortable="true" />
            <PropertyColumn Property="@(p => p.ExamHours)" Sortable="true" />
            <PropertyColumn Property="@(p => p.OtherNonContactCount)" Sortable="true" />
        </FluentDataGrid>
    </FluentGridItem>
</FluentGrid>




@code {
    private IQueryable<Subject> subjects; 
    private VikoDbContext? DbContext { get; set; }

    // private ICollection<Report>? Reports { get; set; }

    
    //private Report? TempReport { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        //Busy = true;

        try
        {
            DbContext = await DbFactory.CreateDbContextAsync();
            subjects = DbContext.Subjects; // Fetching data asynchronously
            
            //TempReport = new Report{Title = "Dėstytojo ataskaita"};
            //
            // Context.Reports.Add(TempReport);
            //
            // await Context.SaveChangesAsync();


            // if (Context?.Reports != null)
            // {
            //     Reports = await Context.Reports.ToListAsync();
            // }
        }
        catch(Exception ex) 
        {
            Console.WriteLine("EXCEPTION"+ ex.Message);
        }
     

        await base.OnInitializedAsync();
    }
    
    public void Dispose()
    {
        DbContext?.Dispose();
    }
}