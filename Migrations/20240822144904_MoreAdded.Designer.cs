// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VikoSoft.Data;

#nullable disable

namespace VikoSoft.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240822144904_MoreAdded")]
    partial class MoreAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tarifikacija.Entities.BaseEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("VikoSoft.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Activity", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("CategoryId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.ActivityCategory", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.ToTable("ActivityCategories");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Category", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.ContactHours", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<int>("LectureHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PracticeHours")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RemoteLectureHours")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RemotePracticeHours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SelfStudyHours")
                        .HasColumnType("INTEGER");

                    b.ToTable("ContactHours", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.ContactHoursDetails", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<int>("ConsultationCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FinalProjectExamCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LecturesCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OtherCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubGroupsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalContactHours")
                        .HasColumnType("INTEGER");

                    b.ToTable("ContactHoursDetails", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Department", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Faculty", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Faculties", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.NonContactHours", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.ToTable("NonContactHours", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.NonContactHoursDetails", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<int>("GradingHours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GradingNumberCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OtherCount")
                        .HasColumnType("INTEGER");

                    b.ToTable("NonContactHoursDetails", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.StudentGroup", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Semester")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Vf")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Vnf")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.ToTable("StudentGroups", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.StudyForm", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("StudyForms", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.StudyPlan", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("StudyPlans", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.StudyProgram", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("StudyPrograms", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Subject", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Semester")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.SubjectType", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("SubjectTypes", (string)null);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.TeacherCard", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.ToTable("TeacherCards");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.TeacherCardSheet", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<int>("SheetType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeacherCardId")
                        .HasColumnType("TEXT");

                    b.HasIndex("TeacherCardId");

                    b.ToTable("TeacherCardSheets");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.TeacherCardSheetActivity", b =>
                {
                    b.HasBaseType("Tarifikacija.Entities.BaseEntity");

                    b.Property<string>("ActivityId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HoursSpent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SheetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("ActivityId");

                    b.HasIndex("SheetId");

                    b.ToTable("TeacherCardSheetActivities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VikoSoft.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VikoSoft.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VikoSoft.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Activity", b =>
                {
                    b.HasOne("VikoSoft.Data.Entities.ActivityCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Category", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.Category", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.ContactHours", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.ContactHours", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.Entities.Subject", "Subject")
                        .WithOne("ContactHours")
                        .HasForeignKey("VikoSoft.Data.Entities.ContactHours", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.ContactHoursDetails", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.ContactHoursDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.Entities.ContactHours", "ContactHours")
                        .WithOne("ContactHoursDetails")
                        .HasForeignKey("VikoSoft.Data.Entities.ContactHoursDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactHours");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Department", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.Department", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.Entities.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Faculty", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.Faculty", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.NonContactHours", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.NonContactHours", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.Entities.Subject", "Subject")
                        .WithOne("NonContactHours")
                        .HasForeignKey("VikoSoft.Data.Entities.NonContactHours", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.NonContactHoursDetails", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.NonContactHoursDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.Entities.NonContactHours", "NonContactHours")
                        .WithOne("NonContactHoursDetails")
                        .HasForeignKey("VikoSoft.Data.Entities.NonContactHoursDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NonContactHours");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.StudentGroup", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.StudentGroup", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.Entities.Department", "Department")
                        .WithMany("StudentGroups")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.Entities.Faculty", "Faculty")
                        .WithMany("StudentGroups")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.StudyForm", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.StudyForm", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.StudyPlan", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.StudyPlan", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.Entities.Department", "Department")
                        .WithMany("StudyPlans")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.StudyProgram", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.StudyProgram", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Subject", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.Subject", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.Entities.SubjectType", "SubjectType")
                        .WithMany("Subjects")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectType");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.SubjectType", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.SubjectType", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.Entities.Category", "Category")
                        .WithMany("SubjectTypes")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.TeacherCard", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.TeacherCard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.TeacherCardSheet", b =>
                {
                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.TeacherCardSheet", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.Entities.TeacherCard", null)
                        .WithMany("Sheets")
                        .HasForeignKey("TeacherCardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.TeacherCardSheetActivity", b =>
                {
                    b.HasOne("VikoSoft.Data.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tarifikacija.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("VikoSoft.Data.Entities.TeacherCardSheetActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VikoSoft.Data.Entities.TeacherCardSheet", "Sheet")
                        .WithMany("Activities")
                        .HasForeignKey("SheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Sheet");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Category", b =>
                {
                    b.Navigation("SubjectTypes");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.ContactHours", b =>
                {
                    b.Navigation("ContactHoursDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Department", b =>
                {
                    b.Navigation("StudentGroups");

                    b.Navigation("StudyPlans");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Faculty", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("StudentGroups");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.NonContactHours", b =>
                {
                    b.Navigation("NonContactHoursDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.Subject", b =>
                {
                    b.Navigation("ContactHours")
                        .IsRequired();

                    b.Navigation("NonContactHours")
                        .IsRequired();
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.SubjectType", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.TeacherCard", b =>
                {
                    b.Navigation("Sheets");
                });

            modelBuilder.Entity("VikoSoft.Data.Entities.TeacherCardSheet", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
